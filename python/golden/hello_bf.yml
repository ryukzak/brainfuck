in_source: |-
  [ This program prints "Hello World!" and a newline to the screen, its
  length is 106 active command characters. [It is not the shortest.]

  This loop is an "initial comment loop", a simple way of adding a comment
  to a BF program such that you don't have to worry about any command
  characters. Any ".", ",", "+", "-", "<" and ">" characters are simply
  ignored, the "[" and "]" characters just have to be balanced. This
  loop and the commands it contains are ignored because the current cell
  defaults to a value of 0; the 0 value causes this loop to be skipped.
  ]
  ++++++++               Set Cell #0 to 8
  [
  >++++               Add 4 to Cell #1; this will always set Cell #1 to 4
  [                   as the cell will be cleared by the loop
  >++             Add 2 to Cell #2
  >+++            Add 3 to Cell #3
  >+++            Add 3 to Cell #4
  >+              Add 1 to Cell #5
  <<<<-           Decrement the loop counter in Cell #1
  ]                   Loop until Cell #1 is zero; number of iterations is 4
  >+                  Add 1 to Cell #2
  >+                  Add 1 to Cell #3
  >-                  Subtract 1 from Cell #4
  >>+                 Add 1 to Cell #6
  [<]                 Move back to the first zero cell you find; this will
  be Cell #1 which was cleared by the previous loop
  <-                  Decrement the loop Counter in Cell #0
  ]                       Loop until Cell #0 is zero; number of iterations is 8

  The result of this is:
    Cell no :   0   1   2   3   4   5   6
    Contents:   0   0  72 104  88  32   8
    Pointer :   ^

    >>.                     Cell #2 has value 72 which is 'H'
    >---.                   Subtract 3 from Cell #3 to get 101 which is 'e'
    +++++++..+++.           Likewise for 'llo' from Cell #3
    >>.                     Cell #5 is 32 for the space
    <-.                     Subtract 1 from Cell #4 for 87 to give a 'W'
    <.                      Cell #3 was set to 'o' from the end of 'Hello'
    +++.------.--------.    Cell #3 for 'rl' and 'd'
    >>+.                    Add 1 to Cell #5 gives us an exclamation point
  >++.                    And finally a newline from Cell #6

in_stdin: |-
  foo
out_code: !!binary |
  cAAAGFAAAABAAAAAcAAABkAAAABgAAADUAAAAEAAAABAAAAAUAAAAFAAAABQAAAAAAAAAFAAAAAQ
  AAAAUAAAACAAAAAwAAAAUAAAAHAAABVgAAATQAAAAEAAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAA
  AAAAAAAAAAAAAAAAAABwAABJMAAAAAAAAAAAAAAAAAAAAAAAAABwAAA6MAAAAAAAAAAAAAAAMAAA
  AAAAAAAAAAAAAAAAADAAAAAAAAAAAAAAAAAAAAAwAAAAAAAAACAAAAAgAAAAIAAAACAAAAAQAAAA
  YAAAJjAAAAAAAAAAMAAAAAAAAAAwAAAAEAAAADAAAAAwAAAAAAAAAHAAAEYgAAAAYAAAQyAAAAAQ
  AAAAYAAAIDAAAAAwAAAAQAAAADAAAAAQAAAAEAAAABAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
  AAAAAAAAAAAAAEAAAABAAAAAAAAAAAAAAAAAAAAAQAAAADAAAAAwAAAAQAAAACAAAAAQAAAAQAAA
  ACAAAABAAAAAAAAAAAAAAAAAAAAAQAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAAEAAAAAQAAAA
  EAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAAEAAAAAwAAAAMAAAAAAAAABAAAAAMAAAAAAAAAAA
  AAAAQAAAAIAAAAA=
out_stdout: |
  source LoC: 43 code instr: 131
  ============================================================
  Hello World!

  ticks: 1532
out_log: |-
  DEBUG   machine:simulation    TICK:   0 PC:   0/0 ADDR:   0 MEM_OUT: 0 ACC: 0 	jz 24 [70000018]
  DEBUG   machine:simulation    TICK:   1 PC:   0/1 ADDR:   0 MEM_OUT: 0 ACC: 0 	jz 24 [70000018]
  DEBUG   machine:simulation    TICK:   2 PC:  24/0 ADDR:   0 MEM_OUT: 0 ACC: 0 	increment [00000000]
  DEBUG   machine:simulation    TICK:   3 PC:  24/1 ADDR:   0 MEM_OUT: 0 ACC: 0 	increment [00000000]
  DEBUG   machine:simulation    TICK:   4 PC:  25/0 ADDR:   0 MEM_OUT: 1 ACC: 0 	increment [00000000]
  DEBUG   machine:simulation    TICK:   5 PC:  25/1 ADDR:   0 MEM_OUT: 1 ACC: 1 	increment [00000000]
  DEBUG   machine:simulation    TICK:   6 PC:  26/0 ADDR:   0 MEM_OUT: 2 ACC: 1 	increment [00000000]
  DEBUG   machine:simulation    TICK:   7 PC:  26/1 ADDR:   0 MEM_OUT: 2 ACC: 2 	increment [00000000]
  DEBUG   machine:simulation    TICK:   8 PC:  27/0 ADDR:   0 MEM_OUT: 3 ACC: 2 	increment [00000000]
  DEBUG   machine:simulation    TICK:   9 PC:  27/1 ADDR:   0 MEM_OUT: 3 ACC: 3 	increment [00000000]
  DEBUG   machine:simulation    TICK:  10 PC:  28/0 ADDR:   0 MEM_OUT: 4 ACC: 3 	increment [00000000]
  DEBUG   machine:simulation    TICK:  11 PC:  28/1 ADDR:   0 MEM_OUT: 4 ACC: 4 	increment [00000000]
  DEBUG   machine:simulation    TICK:  12 PC:  29/0 ADDR:   0 MEM_OUT: 5 ACC: 4 	increment [00000000]
  DEBUG   machine:simulation    TICK:  13 PC:  29/1 ADDR:   0 MEM_OUT: 5 ACC: 5 	increment [00000000]
  DEBUG   machine:simulation    TICK:  14 PC:  30/0 ADDR:   0 MEM_OUT: 6 ACC: 5 	increment [00000000]
  DEBUG   machine:simulation    TICK:  15 PC:  30/1 ADDR:   0 MEM_OUT: 6 ACC: 6 	increment [00000000]
  DEBUG   machine:simulation    TICK:  16 PC:  31/0 ADDR:   0 MEM_OUT: 7 ACC: 6 	increment [00000000]
  DEBUG   machine:simulation    TICK:  17 PC:  31/1 ADDR:   0 MEM_OUT: 7 ACC: 7 	increment [00000000]
  DEBUG   machine:simulation    TICK:  18 PC:  32/0 ADDR:   0 MEM_OUT: 8 ACC: 7 	jz 73 [70000049]
  DEBUG   machine:simulation    TICK:  19 PC:  32/1 ADDR:   0 MEM_OUT: 8 ACC: 8 	jz 73 [70000049]
  DEBUG   machine:simulation    TICK:  20 PC:  33/0 ADDR:   0 MEM_OUT: 8 ACC: 8 	right [30000000]
  DEBUG   machine:simulation    TICK:  21 PC:  34/0 ADDR:   1 MEM_OUT: 0 ACC: 8 	increment [00000000]
  DEBUG   machine:simulation    TICK:  22 PC:  34/1 ADDR:   1 MEM_OUT: 0 ACC: 0 	increment [00000000]
  DEBUG   machine:simulation    TICK:  23 PC:  35/0 ADDR:   1 MEM_OUT: 1 ACC: 0 	increment [00000000]
  DEBUG   machine:simulation    TICK:  24 PC:  35/1 ADDR:   1 MEM_OUT: 1 ACC: 1 	increment [00000000]
  DEBUG   machine:simulation    TICK:  25 PC:  36/0 ADDR:   1 MEM_OUT: 2 ACC: 1 	increment [00000000]
  DEBUG   machine:simulation    TICK:  26 PC:  36/1 ADDR:   1 MEM_OUT: 2 ACC: 2 	increment [00000000]
  DEBUG   machine:simulation    TICK:  27 PC:  37/0 ADDR:   1 MEM_OUT: 3 ACC: 2 	increment [00000000]
  DEBUG   machine:simulation    TICK:  28 PC:  37/1 ADDR:   1 MEM_OUT: 3 ACC: 3 	increment [00000000]
  DEBUG   machine:simulation    TICK:  29 PC:  38/0 ADDR:   1 MEM_OUT: 4 ACC: 3 	jz 58 [7000003A]
  DEBUG   machine:simulation    TICK:  30 PC:  38/1 ADDR:   1 MEM_OUT: 4 ACC: 4 	jz 58 [7000003A]
  DEBUG   machine:simulation    TICK:  31 PC:  39/0 ADDR:   1 MEM_OUT: 4 ACC: 4 	right [30000000]
  DEBUG   machine:simulation    TICK:  32 PC:  40/0 ADDR:   2 MEM_OUT: 0 ACC: 4 	increment [00000000]
  DEBUG   machine:simulation    TICK:  33 PC:  40/1 ADDR:   2 MEM_OUT: 0 ACC: 0 	increment [00000000]
  DEBUG   machine:simulation    TICK:  34 PC:  41/0 ADDR:   2 MEM_OUT: 1 ACC: 0 	increment [00000000]
  DEBUG   machine:simulation    TICK:  35 PC:  41/1 ADDR:   2 MEM_OUT: 1 ACC: 1 	increment [00000000]
  DEBUG   machine:simulation    TICK:  36 PC:  42/0 ADDR:   2 MEM_OUT: 2 ACC: 1 	right [30000000]
  DEBUG   machine:simulation    TICK:  37 PC:  43/0 ADDR:   3 MEM_OUT: 0 ACC: 1 	increment [00000000]
  DEBUG   machine:simulation    TICK:  38 PC:  43/1 ADDR:   3 MEM_OUT: 0 ACC: 0 	increment [00000000]
  DEBUG   machine:simulation    TICK:  39 PC:  44/0 ADDR:   3 MEM_OUT: 1 ACC: 0 	increment [00000000]
  DEBUG   machine:simulation    TICK: EOF
out_code_hex: |-
  0 - 70000018 - jz 24
  1 - 50000000 - input
  2 - 40000000 - print
  3 - 70000006 - jz 6
  4 - 40000000 - print
  5 - 60000003 - jmp 3
  6 - 50000000 - input
  7 - 40000000 - print
  8 - 40000000 - print
  9 - 50000000 - input
  10 - 50000000 - input
  11 - 50000000 - input
  12 - 00000000 - increment
  13 - 50000000 - input
  14 - 10000000 - decrement
  15 - 50000000 - input
  16 - 20000000 - left
  17 - 30000000 - right
  18 - 50000000 - input
  19 - 70000015 - jz 21
  20 - 60000013 - jmp 19
  21 - 40000000 - print
  22 - 40000000 - print
  23 - 60000000 - jmp 0
  24 - 00000000 - increment
  25 - 00000000 - increment
  26 - 00000000 - increment
  27 - 00000000 - increment
  28 - 00000000 - increment
  29 - 00000000 - increment
  30 - 00000000 - increment
  31 - 00000000 - increment
  32 - 70000049 - jz 73
  33 - 30000000 - right
  34 - 00000000 - increment
  35 - 00000000 - increment
  36 - 00000000 - increment
  37 - 00000000 - increment
  38 - 7000003A - jz 58
  39 - 30000000 - right
  40 - 00000000 - increment
  41 - 00000000 - increment
  42 - 30000000 - right
  43 - 00000000 - increment
  44 - 00000000 - increment
  45 - 00000000 - increment
  46 - 30000000 - right
  47 - 00000000 - increment
  48 - 00000000 - increment
  49 - 00000000 - increment
  50 - 30000000 - right
  51 - 00000000 - increment
  52 - 20000000 - left
  53 - 20000000 - left
  54 - 20000000 - left
  55 - 20000000 - left
  56 - 10000000 - decrement
  57 - 60000026 - jmp 38
  58 - 30000000 - right
  59 - 00000000 - increment
  60 - 30000000 - right
  61 - 00000000 - increment
  62 - 30000000 - right
  63 - 10000000 - decrement
  64 - 30000000 - right
  65 - 30000000 - right
  66 - 00000000 - increment
  67 - 70000046 - jz 70
  68 - 20000000 - left
  69 - 60000043 - jmp 67
  70 - 20000000 - left
  71 - 10000000 - decrement
  72 - 60000020 - jmp 32
  73 - 30000000 - right
  74 - 30000000 - right
  75 - 40000000 - print
  76 - 30000000 - right
  77 - 10000000 - decrement
  78 - 10000000 - decrement
  79 - 10000000 - decrement
  80 - 40000000 - print
  81 - 00000000 - increment
  82 - 00000000 - increment
  83 - 00000000 - increment
  84 - 00000000 - increment
  85 - 00000000 - increment
  86 - 00000000 - increment
  87 - 00000000 - increment
  88 - 40000000 - print
  89 - 40000000 - print
  90 - 00000000 - increment
  91 - 00000000 - increment
  92 - 00000000 - increment
  93 - 40000000 - print
  94 - 30000000 - right
  95 - 30000000 - right
  96 - 40000000 - print
  97 - 20000000 - left
  98 - 10000000 - decrement
  99 - 40000000 - print
  100 - 20000000 - left
  101 - 40000000 - print
  102 - 00000000 - increment
  103 - 00000000 - increment
  104 - 00000000 - increment
  105 - 40000000 - print
  106 - 10000000 - decrement
  107 - 10000000 - decrement
  108 - 10000000 - decrement
  109 - 10000000 - decrement
  110 - 10000000 - decrement
  111 - 10000000 - decrement
  112 - 40000000 - print
  113 - 10000000 - decrement
  114 - 10000000 - decrement
  115 - 10000000 - decrement
  116 - 10000000 - decrement
  117 - 10000000 - decrement
  118 - 10000000 - decrement
  119 - 10000000 - decrement
  120 - 10000000 - decrement
  121 - 40000000 - print
  122 - 30000000 - right
  123 - 30000000 - right
  124 - 00000000 - increment
  125 - 40000000 - print
  126 - 30000000 - right
  127 - 00000000 - increment
  128 - 00000000 - increment
  129 - 40000000 - print
  130 - 80000000 - halt
